import itertools

import numpy as np
import pandas as pd
import pytest
from scipy.special import expit
from scipy.stats import multivariate_normal, norm

from cpsplines.fittings.fit_cpsplines import CPsplines
from cpsplines.utils.rearrange_data import grid_to_scatter

# np.cos(x) (unconstrained)
# Using grid search
# No out-of-range prediction
sol1 = np.array(
    [
        1.13211815,
        1.03923459,
        0.87985899,
        0.44198769,
        -0.15101383,
        -0.69063377,
        -1.0120022,
        -1.0120022,
        -0.69063377,
        -0.15101383,
        0.44198769,
        0.87985899,
        1.03923459,
        1.13211815,
    ]
)

# np.cos(x) (non-negativity)
# Using grid search
# No out-of-range prediction
sol2 = np.array(
    [
        1.09034519,
        1.03523205,
        0.91087855,
        0.33618185,
        -0.0050857,
        0.00169804,
        -0.00007382,
        -0.00007385,
        0.00169818,
        -0.00508605,
        0.33618199,
        0.91087852,
        1.03523205,
        1.09034524,
    ]
)

# np.exp(4 - x / 25) + 4 * np.cos(x / 8) (unconstrained)
# Using grid search
# No out-of-range prediction
sol3 = np.array(
    [
        157.72305396,
        99.04296211,
        55.61628242,
        27.45043306,
        14.22655173,
        11.38107956,
        8.594066,
        2.37726194,
        -0.03712625,
        2.73446081,
        2.48116084,
        -1.50266035,
        -1.25842823,
        2.52896426,
        1.7301561,
        -2.8234932,
        -3.28028957,
        3.59042672,
        17.78015563,
        39.27004736,
    ]
)

# np.exp(4 - x / 25) + 4 * np.cos(x / 8) (10 <= y <= 40)
# Using grid search
# No out-of-range prediction
sol4 = np.array(
    [
        29.56171239,
        42.49430705,
        42.91977505,
        31.40441799,
        16.36601712,
        9.90236658,
        10.01162103,
        9.99838448,
        10.00053177,
        9.9998132,
        10.00010617,
        9.99995007,
        10.00001995,
        9.9999921,
        10.00000559,
        9.9999981,
        9.99999981,
        10.00000434,
        9.99997961,
        10.00046096,
    ]
)

# 2 * (2 * x - 1) ** 3 (unconstrained)
# Using optimizer
# No out-of-range prediction
sol5 = np.array(
    [
        -2.5951675,
        -1.40413346,
        -0.64394994,
        -0.22001628,
        -0.03598511,
        0.00399533,
        -0.00399533,
        0.03598511,
        0.22001628,
        0.64394994,
        1.40413346,
        2.5951675,
    ]
)

# 2 * (2 * x - 1) ** 3 (non-decreasing and concave)
# Using optimizer
# No out-of-range prediction
sol6 = np.array(
    [
        -2.60600802,
        -1.39765479,
        -0.64450191,
        -0.43731106,
        -0.23012034,
        -0.02292962,
        0.18426112,
        0.39145186,
        0.59864262,
        0.8058334,
        1.01302418,
        1.22021493,
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (unconstrained)
# Using grid search
# No out-of-range prediction
sol7 = np.array(
    [
        [-1.026387, 0.1079524, 0.36420651, -0.36420651, -0.1079524, 1.026387],
        [-0.59581144, 0.55225976, 0.68119664, -0.68119664, -0.55225976, 0.59581144],
        [-0.18216655, 0.64291108, 0.64651309, -0.64651309, -0.64291108, 0.18216655],
        [0.05908496, -0.4352502, -0.52001599, 0.52001599, 0.4352502, -0.05908496],
        [0.05908496, -0.4352502, -0.52001599, 0.52001599, 0.4352502, -0.05908496],
        [-0.18216655, 0.64291108, 0.64651309, -0.64651309, -0.64291108, 0.18216655],
        [-0.59581144, 0.55225976, 0.68119664, -0.68119664, -0.55225976, 0.59581144],
        [-1.026387, 0.1079524, 0.36420651, -0.36420651, -0.1079524, 1.026387],
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (non-negativity)
# Using grid search
# No out-of-range prediction
sol8 = np.array(
    [
        [-0.80985508, 0.31668373, -0.03557304, -0.03012587, 0.1575913, -0.13556319],
        [-0.60077917, 0.64374306, 0.32618134, -0.04510788, 0.14143147, -0.12715063],
        [-0.37227211, 0.6935879, 0.41873278, -0.14854258, 0.02396532, -0.1031168],
        [-0.13824966, 0.12405808, -0.17147697, 0.29493385, 0.42637766, -0.12405261],
        [-0.13796792, 0.12420349, -0.17358708, 0.29943516, 0.42120213, -0.10072458],
        [-0.37020297, 0.69188251, 0.42227456, -0.14375134, 0.02598244, -0.08707477],
        [-0.59664828, 0.6396059, 0.33519406, -0.08044187, 0.17006577, -0.24617402],
        [-0.80385412, 0.31034413, -0.02467559, -0.14880051, 0.18024642, -0.42036441],
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (unconstrained)
# Using optimizer
# No out-of-range prediction
sol9 = np.array(
    [
        [0.48733637, -0.48700016, -0.49660183, 0.49660183, 0.48700016, -0.48733637],
        [-0.51039247, 0.49298224, 0.49012297, -0.49012297, -0.49298224, 0.51039247],
        [-1.14278011, 1.0832033, 1.06131396, -1.06131396, -1.0832033, 1.14278011],
        [-0.81254844, 0.77377079, 0.76089859, -0.76089859, -0.77377079, 0.81254844],
        [0.17915835, -0.17083564, -0.16816641, 0.16816641, 0.17083564, -0.17915835],
        [1.02647689, -0.97568549, -0.95807095, 0.95807095, 0.97568549, -1.02647689],
        [1.02647689, -0.97568549, -0.95807095, 0.95807095, 0.97568549, -1.02647689],
        [0.17915835, -0.17083564, -0.16816641, 0.16816641, 0.17083564, -0.17915835],
        [-0.81254844, 0.77377079, 0.76089859, -0.76089859, -0.77377079, 0.81254844],
        [-1.14278011, 1.0832033, 1.06131396, -1.06131396, -1.0832033, 1.14278011],
        [-0.51039247, 0.49298224, 0.49012297, -0.49012297, -0.49298224, 0.51039247],
        [0.48733637, -0.48700016, -0.49660183, 0.49660183, 0.48700016, -0.48733637],
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (non-negativity and non-decreasing
# along y-direction)
# Using optimizer
# No out-of-range prediction
sol10 = np.array(
    [
        [-0.02166063, -0.01945414, -0.02166059, 0.01751593, 0.01700371, 0.01551912],
        [0.03167037, 0.02946398, 0.03167043, -0.00750608, -0.00699385, -0.0055092],
        [-0.01066619, -0.00845979, -0.01066625, 0.02851026, 0.02799803, 0.02651337],
        [0.02808215, 0.02587576, 0.02808221, -0.0110943, -0.01058207, -0.00909742],
        [-0.00110323, 0.00110322, -0.00110323, 0.03807328, 0.03756105, 0.03607641],
        [0.00110322, -0.00110323, 0.00110322, 0.62336888, 0.62388114, 0.62536579],
        [-0.00110323, 0.00110322, -0.00110324, 0.63059674, 0.63008449, 0.62859984],
        [0.00110322, -0.00110323, 0.00110323, 0.02709003, 0.02760231, 0.02908696],
        [0.01850419, 0.0207107, 0.01850424, -0.00748256, -0.00799484, -0.00947948],
        [-0.00628688, -0.00849338, -0.00628693, 0.01969987, 0.02021214, 0.02169679],
        [0.02416809, 0.0263746, 0.02416814, -0.00181866, -0.00233094, -0.00381558],
        [-0.38163306, 0.3310909, 0.18195818, -0.1318668, 0.13794232, -0.4430381],
    ]
)


# np.sin(3 * pi * x) * np.sin(2 * pi * y) ** np.sin(pi * z) (unconstrained)
# Using grid search
# No out-of-range prediction
sol11 = np.array(
    [
        [
            [0.38925069, 0.47707755, 0.55354554, 0.47707755, 0.38925069],
            [-0.14464081, -0.29610914, -0.50742697, -0.29610914, -0.14464081],
            [-0.64522275, -1.32407838, -2.15137408, -1.32407838, -0.64522275],
            [-0.84158214, -1.95384513, -3.28062299, -1.95384513, -0.84158214],
            [-0.39181305, -0.95061127, -1.62597974, -0.95061127, -0.39181305],
            [0.39181305, 0.95061127, 1.62597974, 0.95061127, 0.39181305],
            [0.84158214, 1.95384513, 3.28062299, 1.95384513, 0.84158214],
            [0.64522275, 1.32407838, 2.15137408, 1.32407838, 0.64522275],
            [0.14464081, 0.29610914, 0.50742697, 0.29610914, 0.14464081],
            [-0.38925069, -0.47707755, -0.55354554, -0.47707755, -0.38925069],
        ],
        [
            [0.03270436, -0.20351954, -0.39630309, -0.20351954, 0.03270436],
            [0.04188003, -0.07267593, -0.34508471, -0.07267593, 0.04188003],
            [-0.11023917, 0.34836578, 0.38298832, 0.34836578, -0.11023917],
            [-0.37037796, 0.42633328, 0.56576006, 0.42633328, -0.37037796],
            [-0.20156171, 0.1948345, 0.20331437, 0.1948345, -0.20156171],
            [0.20156171, -0.1948345, -0.20331437, -0.1948345, 0.20156171],
            [0.37037796, -0.42633328, -0.56576006, -0.42633328, 0.37037796],
            [0.11023917, -0.34836578, -0.38298832, -0.34836578, 0.11023917],
            [-0.04188003, 0.07267593, 0.34508471, 0.07267593, -0.04188003],
            [-0.03270436, 0.20351954, 0.39630309, 0.20351954, -0.03270436],
        ],
        [
            [-0.09503939, -0.29296608, -0.47444872, -0.29296608, -0.09503939],
            [-0.0998388, -0.2955443, -0.53919599, -0.2955443, -0.0998388],
            [-0.25695137, 0.32301617, 0.89369978, 0.32301617, -0.25695137],
            [-0.42449481, 0.92987358, 2.37820252, 0.92987358, -0.42449481],
            [-0.22247976, 0.45153893, 1.17848755, 0.45153893, -0.22247976],
            [0.22247976, -0.45153893, -1.17848755, -0.45153893, 0.22247976],
            [0.42449481, -0.92987358, -2.37820252, -0.92987358, 0.42449481],
            [0.25695137, -0.32301617, -0.89369978, -0.32301617, 0.25695137],
            [0.0998388, 0.2955443, 0.53919599, 0.2955443, 0.0998388],
            [0.09503939, 0.29296608, 0.47444872, 0.29296608, 0.09503939],
        ],
        [
            [-0.03215197, 0.25120674, 0.51134329, 0.25120674, -0.03215197],
            [0.1502849, 0.45958753, 0.90612018, 0.45958753, 0.1502849],
            [0.44191707, -0.57386978, -1.37150169, -0.57386978, 0.44191707],
            [0.74784696, -1.46536376, -3.5909169, -1.46536376, 0.74784696],
            [0.39782222, -0.6939776, -1.73860332, -0.6939776, 0.39782222],
            [-0.39782222, 0.6939776, 1.73860332, 0.6939776, -0.39782222],
            [-0.74784696, 1.46536376, 3.5909169, 1.46536376, -0.74784696],
            [-0.44191707, 0.57386978, 1.37150169, 0.57386978, -0.44191707],
            [-0.1502849, -0.45958753, -0.90612018, -0.45958753, -0.1502849],
            [0.03215197, -0.25120674, -0.51134329, -0.25120674, 0.03215197],
        ],
        [
            [-0.09503939, -0.29296608, -0.47444872, -0.29296608, -0.09503939],
            [-0.0998388, -0.2955443, -0.53919599, -0.2955443, -0.0998388],
            [-0.25695137, 0.32301617, 0.89369978, 0.32301617, -0.25695137],
            [-0.42449481, 0.92987358, 2.37820252, 0.92987358, -0.42449481],
            [-0.22247976, 0.45153893, 1.17848755, 0.45153893, -0.22247976],
            [0.22247976, -0.45153893, -1.17848755, -0.45153893, 0.22247976],
            [0.42449481, -0.92987358, -2.37820252, -0.92987358, 0.42449481],
            [0.25695137, -0.32301617, -0.89369978, -0.32301617, 0.25695137],
            [0.0998388, 0.2955443, 0.53919599, 0.2955443, 0.0998388],
            [0.09503939, 0.29296608, 0.47444872, 0.29296608, 0.09503939],
        ],
        [
            [0.03270436, -0.20351954, -0.39630309, -0.20351954, 0.03270436],
            [0.04188003, -0.07267593, -0.34508471, -0.07267593, 0.04188003],
            [-0.11023917, 0.34836578, 0.38298832, 0.34836578, -0.11023917],
            [-0.37037796, 0.42633328, 0.56576006, 0.42633328, -0.37037796],
            [-0.20156171, 0.1948345, 0.20331437, 0.1948345, -0.20156171],
            [0.20156171, -0.1948345, -0.20331437, -0.1948345, 0.20156171],
            [0.37037796, -0.42633328, -0.56576006, -0.42633328, 0.37037796],
            [0.11023917, -0.34836578, -0.38298832, -0.34836578, 0.11023917],
            [-0.04188003, 0.07267593, 0.34508471, 0.07267593, -0.04188003],
            [-0.03270436, 0.20351954, 0.39630309, 0.20351954, -0.03270436],
        ],
        [
            [0.38925069, 0.47707755, 0.55354554, 0.47707755, 0.38925069],
            [-0.14464081, -0.29610914, -0.50742697, -0.29610914, -0.14464081],
            [-0.64522275, -1.32407838, -2.15137408, -1.32407838, -0.64522275],
            [-0.84158214, -1.95384513, -3.28062299, -1.95384513, -0.84158214],
            [-0.39181305, -0.95061127, -1.62597974, -0.95061127, -0.39181305],
            [0.39181305, 0.95061127, 1.62597974, 0.95061127, 0.39181305],
            [0.84158214, 1.95384513, 3.28062299, 1.95384513, 0.84158214],
            [0.64522275, 1.32407838, 2.15137408, 1.32407838, 0.64522275],
            [0.14464081, 0.29610914, 0.50742697, 0.29610914, 0.14464081],
            [-0.38925069, -0.47707755, -0.55354554, -0.47707755, -0.38925069],
        ],
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) ** np.sin(pi * z) (non-negativity)
# Using grid search
# No out-of-range prediction
sol12 = np.array(
    [
        [
            [0.82456643, 1.19603669, 1.46902689, 1.18705258, 0.8011448],
            [0.02293622, -0.22325963, -0.5328345, -0.28410583, -0.10300906],
            [-0.50312036, -1.99300355, -3.50832897, -2.0862241, -0.66779239],
            [-0.7470301, -2.99493343, -5.17172379, -3.06530592, -0.83990058],
            [-0.31975682, -1.54378178, -2.87406937, -1.60830226, -0.31427196],
            [0.06906908, -0.12635022, -0.66721734, -0.08263473, 0.56122301],
            [0.08119788, -0.39555244, -1.21340365, -0.27582609, 0.89007258],
            [0.06913923, -0.19604079, -0.68124987, -0.09370757, 0.73698996],
            [0.29854099, 0.41647502, 0.43062276, 0.44094787, 0.56897793],
            [0.63505528, 0.804317, 0.94023579, 0.78773379, 0.60047011],
        ],
        [
            [0.18849409, 0.209783, 0.22042101, 0.23093084, 0.21617103],
            [0.00789017, 0.06030113, 0.17174233, 0.08796634, 0.01261895],
            [0.20229326, 0.46191311, 0.7728985, 0.46755417, 0.2037238],
            [0.0553124, 0.86164744, 1.78873245, 0.90793021, 0.16878089],
            [0.13321483, 0.36879382, 0.67977809, 0.36765565, 0.06237822],
            [-0.05277337, 0.07043619, 0.2599249, 0.0678618, -0.10065405],
            [-0.01733423, 0.12517577, 0.36623295, 0.079853, -0.28958709],
            [-0.05873073, 0.09280603, 0.26471171, 0.07869331, -0.16094769],
            [-0.05938954, -0.14979599, -0.21572505, -0.18208646, -0.09440694],
            [0.22280451, 0.28881371, 0.36243439, 0.29763353, 0.1971701],
        ],
        [
            [0.08516399, -0.06364211, -0.21230057, -0.06347808, 0.0854789],
            [0.06034927, -0.13088378, -0.34686893, -0.11972279, 0.0869071],
            [-0.1511267, -0.01282503, 0.12849543, -0.01633754, -0.21039188],
            [-0.37211988, 0.4503684, 1.29085619, 0.43158222, -0.50591939],
            [-0.08366277, -0.06379212, -0.07002147, -0.05329951, -0.07500775],
            [0.08196036, -0.09032714, -0.3018602, -0.09187974, 0.07800625],
            [0.01187754, -0.13567771, -0.31886415, -0.10126585, -0.00704303],
            [0.07560367, -0.06072391, -0.31722931, -0.05051884, 0.06098197],
            [-0.01619113, 0.02941192, 0.12215387, 0.03668516, -0.18320566],
            [0.09799334, 0.22780104, 0.37662732, 0.21500266, -0.04577748],
        ],
        [
            [0.09085642, 0.02744574, -0.01417808, 0.00079426, -0.01389667],
            [0.05801948, 0.1072217, 0.22204566, 0.09655839, -0.0628738],
            [0.08124847, -0.00408649, -0.08720299, 0.00044836, 0.11317741],
            [0.17648025, -0.2152616, -0.62370241, -0.20309712, 0.21081191],
            [0.05362174, 0.01925073, 0.00220213, 0.02416041, 0.04981966],
            [-0.06382576, 0.13089653, 0.33605053, 0.1095422, -0.08951485],
            [-0.47790382, 0.90522612, 2.22441887, 0.85555391, -0.14744808],
            [-0.24556347, 0.2168269, 0.5287319, 0.19392493, -0.10996303],
            [0.00528083, -0.05285207, -0.14185623, -0.05881784, -0.2060113],
            [0.11019291, 0.03473527, -0.02788398, -0.01529883, -0.10952584],
        ],
        [
            [0.11428395, -0.04971131, -0.1885393, -0.04868754, 0.1207648],
            [0.07754979, -0.13845397, -0.3426365, -0.12785028, 0.08701981],
            [-0.15986929, -0.01223954, 0.12650102, -0.01753819, -0.18148252],
            [-0.37224486, 0.458445, 1.28855964, 0.41844946, -0.41136795],
            [-0.07045125, -0.08462573, -0.08666099, -0.09781625, -0.04681517],
            [0.0896434, -0.09117247, -0.2657989, -0.09025481, 0.14282445],
            [-0.00157151, -0.12580758, -0.34636307, -0.12429952, 0.10297684],
            [0.09165392, -0.08601266, -0.29542704, -0.0641858, 0.09968695],
            [-0.04065783, 0.06483085, 0.19994931, 0.02838897, -0.09713394],
            [0.09535473, 0.26153094, 0.41094228, 0.24455896, 0.047886],
        ],
        [
            [0.2162169, 0.23679379, 0.26877498, 0.29292859, 0.40335355],
            [-0.01369639, 0.05436341, 0.18824606, 0.11678417, 0.10017041],
            [0.17093687, 0.46181774, 0.77732181, 0.5257314, -0.09867071],
            [0.0849722, 0.87301915, 1.73371582, 1.02202624, -0.18067714],
            [0.0439983, 0.39690197, 0.76151485, 0.49214454, -0.0279041],
            [-0.00244589, 0.08762801, 0.11201294, 0.09857797, -0.37249741],
            [-0.15031171, 0.18307363, 0.40823938, 0.17253294, -0.7496304],
            [0.00221264, 0.13532824, 0.18189469, 0.11339816, -0.32220926],
            [-0.04801114, -0.2780198, -0.46637989, -0.17672334, 0.06853776],
            [0.0933802, 0.1514442, 0.22381453, 0.25421477, 0.30020631],
        ],
        [
            [0.82230521, 1.21199829, 1.53291051, 1.31012417, 1.03095485],
            [-0.02386809, -0.25622263, -0.53531305, -0.40834727, -0.3054755],
            [-0.54242705, -2.01521128, -3.53357636, -2.41303804, -1.39208648],
            [-0.73002502, -2.95131242, -5.16984798, -3.39863785, -1.74960181],
            [-0.32711541, -1.52217734, -2.83267052, -1.87315017, -1.13009262],
            [0.13404603, -0.23115494, -0.73499817, -0.30573519, -0.37492675],
            [0.12520012, -0.38023803, -0.97832448, -0.30467578, -0.09233001],
            [0.08366657, -0.29663138, -0.80789861, -0.30303737, 0.05838411],
            [0.08041618, -0.04873173, -0.20574371, 0.02369934, 0.23400918],
            [0.15596433, 0.22293771, 0.31625026, 0.3685182, 0.41868983],
        ],
    ]
)

# np.sin(x) (unconstrained)
# Using optimizer
# Forward and backwards prediction
sol13 = np.array(
    [
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.397890257,
        0.000029832,
        0.397733861,
        0.734942717,
        0.960237041,
        1.03936126,
        0.960237041,
        0.734942717,
        0.397733861,
        0.000029832,
        -0.397890257,
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.732664656,
        -0.732664656,
    ]
)

# np.sin(x) (non-negativity)
# Using optimizer
# Forward prediction
sol14 = np.array(
    [
        -0.21695642,
        -0.20266399,
        0.00048606,
        0.19698382,
        0.3863364,
        0.56099531,
        0.71393349,
        0.83952565,
        0.93286054,
        0.99017678,
        1.01011221,
        0.98761699,
        0.98391834,
        0.98330861,
        0.9829356,
        0.98279734,
        0.98277886,
        0.98276742,
    ]
)

# np.arctan(x)*np.arctan(y) (Non-decreasing along y-direction)
# Using grid search
# Forward prediction along x-direction and backwards prediction along
# y-direction
sol15 = np.array(
    [
        [-0.01500464, -0.01189536, -0.01122042, -0.02328383, -0.02845942, 0.01222135],
        [-0.01811855, -0.01257072, 0.01559344, 0.04464826, 0.06245488, 0.09902459],
        [-0.02678618, -0.02500935, 0.04483974, 0.14713605, 0.2289398, 0.26637],
        [-0.03723566, -0.0320246, 0.06878376, 0.22052246, 0.34214508, 0.40664596],
        [-0.02510833, -0.03031934, 0.07789991, 0.28900298, 0.45881136, 0.51424841],
        [0.02001968, 0.03299117, 0.12664449, 0.3087991, 0.45968607, 0.50011128],
        [0.05217587, 0.08433176, 0.16782851, 0.29250935, 0.40090043, 0.45050585],
    ]
)

# 2 * (2 * x - 1) ** 3 (unconstrained)
# Using optimizer
# No out-of-range prediction
# Enforce the second derivative value at x = 0.8 is 700 with tolerance 1e-8
sol16 = np.array(
    [
        -3.09653031,
        -1.99192066,
        -0.90492261,
        -0.45651211,
        0.02461047,
        -0.21738733,
        0.40066724,
        -0.73585269,
        1.38526053,
        -1.37360499,
        2.86752948,
        -0.75904986,
        13.43686682,
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y)
# Using grid search
# No out-of-range prediction
# Enforce the value at (x,y) = (4,3) is 4 with tolerance 1e-8
sol17 = np.array(
    [
        [-2.38182916, 2.39970157, -2.49938286, -0.96619358, 1.04954661, 0.19003811],
        [0.01612231, 0.87760275, -0.46720752, -1.24180009, -0.26714339, 0.68551821],
        [2.32620017, -1.08846068, 2.09609414, -0.58610299, -1.30374277, 1.16618394],
        [3.59396809, -3.46041227, 6.5086408, 3.78973664, -0.89258962, 1.40486524],
        [3.05269953, -2.53999397, 2.11784542, 1.20669247, -0.386364, 1.15311934],
        [1.11294575, 0.20577495, 0.22849025, -1.17002123, -0.6987175, 0.64769801],
        [-1.30450399, 1.12302325, 0.25770622, -0.62351554, -0.32455208, 0.22031567],
        [-3.7141894, 1.48500847, 0.19189211, 0.34426358, 0.29490921, -0.17344455],
    ]
)

# Gaussian pdf with mean 0 and standard deviation 2 (probability density function)
# Using optimizer
# No prediction
sol18 = np.array(
    [
        -0.24948697,
        0.07550771,
        -0.05254383,
        0.14799594,
        0.14799594,
        -0.05254383,
        0.07550771,
        -0.24948697,
    ]
)

# Multivariate gaussian pdf with mean (0,0) and covariate matrix [[2, 0.5],
# [0.5, 1]] (probability density function)
# Using grid search
# No prediction
sol19 = np.array(
    [
        [-0.01427045, 0.02801064, -0.01554955, 0.00433423, 0.00859512, 0.0079357],
        [0.00116722, -0.00702815, 0.00701625, -0.00139193, -0.00194026, -0.00335714],
        [0.03499568, -0.01297275, 0.05606468, 0.0042945, -0.00098802, 0.00567942],
        [0.06971778, -0.02908149, 0.10883901, 0.06729358, -0.01955591, 0.05103627],
        [0.05087725, -0.01948732, 0.06739461, 0.10901138, -0.02908846, 0.06958817],
        [0.0058145, -0.00121249, 0.00422258, 0.05575263, -0.01301563, 0.03582697],
        [-0.00170639, -0.00146472, -0.00137067, 0.00789573, -0.00704689, -0.00108668],
        [0.00489731, 0.00383655, 0.00647637, -0.01385008, 0.00546359, -0.02966302],
    ]
)

# np.exp(4 - x / 25) + 4 * np.cos(x / 8) (10 <= y <= 40)
# Using grid search
# No out-of-range prediction
# y_range restricted to [0,1]
sol20 = np.array(
    [
        29.56394593,
        42.4949485,
        42.91958671,
        31.40416391,
        16.36640315,
        9.90329516,
        10.01136321,
        9.99852563,
        10.00045964,
        9.99988605,
        10.00005597,
        9.99998044,
        10.00001439,
        9.99999326,
        10.00000618,
        9.99999573,
        10.00000549,
        9.99999059,
        10.00003871,
        9.99956708,
    ]
)

# (2 * x - 1) ** 3 (unconstrained)
# Using optimizer
# No out-of-range prediction
# Enforce the second derivative value at x = 0.8 is 700 with tolerance 1e-8
# y_range restricted to [-0.6,0.4]
sol21 = np.array(
    [
        -1.41014341,
        -1.03347074,
        -0.42379205,
        -0.26597139,
        0.0750334,
        -0.22179019,
        0.40888894,
        -0.75117711,
        1.36447788,
        -1.60316891,
        2.42918429,
        -1.78047033,
        12.01611505,
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (non-negativity)
# Using grid search
# No out-of-range prediction
# y_range restricted to [0,0.01]
sol22 = np.array(
    [
        [-0.81030983, 0.31700334, -0.03569446, -0.03011383, 0.15743891, -0.13541432],
        [-0.60096462, 0.64394311, 0.32607544, -0.04506931, 0.14136839, -0.12708332],
        [-0.37219654, 0.69361345, 0.41863823, -0.14852706, 0.02397196, -0.10312412],
        [-0.13796828, 0.12380278, -0.1714081, 0.29486552, 0.42641162, -0.1240893],
        [-0.13757178, 0.12377434, -0.17297603, 0.29939452, 0.42123875, -0.10076281],
        [-0.36992631, 0.69167177, 0.42263985, -0.14379063, 0.02601862, -0.087105],
        [-0.59669977, 0.63967536, 0.33502469, -0.08043854, 0.17006664, -0.24619856],
        [-0.8042755, 0.3106384, -0.02535701, -0.14876178, 0.18019654, -0.4203853],
    ]
)

# int(100 * np.abs(np.sin(x))) (Poisson)
# Using grid search
# No out-of-range prediction
sol23 = np.array(
    [
        -3.65410294,
        3.28035389,
        4.49911763,
        5.01727699,
        2.54899044,
        4.32149478,
        5.17261328,
        2.7648977,
        4.01565893,
        5.14575313,
        3.48545299,
        2.34756748,
        10.05801066,
    ]
)

# int(100 * np.abs(np.sin(x))) (Poisson)
# Using grid search
# Out-of-range prediction(both backwards and forward)
sol24 = np.array(
    [
        -0.47367524,
        -0.47367524,
        0.73399856,
        4.2482178,
        5.04467335,
        3.99779629,
        2.5247231,
        5.64885298,
        3.96039615,
        2.5997617,
        5.11728104,
        4.78225971,
        1.8458942,
        5.30524101,
        7.00617827,
        7.00617827,
    ]
)

# int(100 * np.abs(np.sin(x) * np.sin(y))) (Poisson)
# Using optimizer
# No out-of-range prediction
sol25 = np.array(
    [
        [
            -31.1749285,
            -30.99815787,
            -31.1508761,
            -31.09232884,
            -31.12068473,
            -30.88482654,
        ],
        [4.46160766, 8.7501684, 7.17667404, 8.35453106, 7.11695284, 9.6471395],
        [-2.93333726, 3.59980079, 1.18194743, 2.97222105, 1.05886118, 4.72338327],
        [0.09851227, 5.94549142, 3.80203743, 5.38663859, 3.72380307, 6.92421957],
        [-1.85713533, 3.84513551, 1.74844565, 3.29368096, 1.65100374, 4.86766742],
        [-0.03468344, 6.48434943, 4.09266226, 5.86110852, 3.99203727, 7.54064975],
        [-1.88333468, 2.07971865, 0.57085708, 1.71686205, 0.47673371, 3.06312649],
        [9.02573183, 9.48614229, 9.35889252, 9.50656974, 9.37758714, 9.67557825],
    ]
)


# int(100 * expit(x)) (Poisson, non-decreasing)
# Using grid-search
# No out-of-range prediction
sol26 = np.array(
    [
        -12.65024251,
        1.13650132,
        1.39138262,
        2.2406885,
        2.89069317,
        3.4905134,
        3.93806305,
        4.24168972,
        4.42013462,
        4.50801337,
        4.56645515,
        4.5296835,
        5.58666755,
    ]
)

sol27 = np.array(
    [
        -8.86782434,
        -7.25446019,
        -5.64132659,
        -4.03263961,
        -2.45540244,
        -1.04312644,
        -0.15969901,
        0.12762184,
        0.0754049,
        -0.07539484,
        -0.12761192,
        0.15970541,
        1.04312464,
        2.45539345,
        4.03263415,
        5.64133715,
        7.25449177,
        8.86787736,
    ]
)

sol28 = np.array(
    [
        -7.35472285,
        -6.06601867,
        -4.77764552,
        -3.49487969,
        -2.24444277,
        -1.1258802,
        -0.36889711,
        -0.04278566,
        0.00856289,
        -0.00855315,
        0.04279452,
        0.36890325,
        1.12588242,
        2.24443992,
        3.49487209,
        4.77763455,
        6.06600546,
        7.35470808,
    ]
)

sol29 = np.array(
    [
        [
            -12.44271196,
            -11.41315447,
            -12.26942281,
            -12.26942282,
            -11.41315445,
            -12.4427119,
        ],
        [-13.2212277, 2.61941299, -1.37569824, -1.37569826, 2.619413, -13.22122766],
        [-14.90929937, 3.93833098, -1.0145905, -1.01459049, 3.93833097, -14.90929936],
        [-15.26037983, 2.12822571, -1.67896884, -1.67896884, 2.12822571, -15.26037983],
        [-15.26037983, 2.12822571, -1.67896884, -1.67896884, 2.12822571, -15.26037983],
        [-14.90929937, 3.93833098, -1.01459049, -1.01459049, 3.93833098, -14.90929936],
        [-13.22122768, 2.61941298, -1.37569825, -1.37569825, 2.61941298, -13.22122765],
        [
            -12.44271193,
            -11.41315446,
            -12.26942282,
            -12.26942282,
            -11.41315445,
            -12.4427119,
        ],
    ]
)

# 3 + np.log(x) (non-decreasing and concave)
# Using grid search
# No out-of-range prediction
# The curve must be above the observed data
sol30 = np.array(
    [
        2.3244702,
        3.06816558,
        3.69266421,
        4.04449385,
        4.31861322,
        4.53264478,
        4.70943064,
        4.859875,
        4.99066232,
        5.10646676,
        5.21015859,
        5.30383713,
        5.39526059,
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (unconstrained)
# Using grid search
# No out-of-range prediction
# Scatter data
sol31 = np.array(
    [
        [0.03682754, -0.04646913, 1.23720251, -1.11645444, -0.52827376, 0.56243463],
        [0.02439449, 0.16738102, 0.93734991, -0.85685263, -0.4663202, 0.4345258],
        [0.00201919, 0.27640339, 0.55166158, -0.52529728, -0.33452587, 0.31620242],
        [-0.05959748, 0.03396833, -0.11344107, 0.09202433, 0.04554356, 0.25373607],
        [-0.16152862, -0.10641789, -0.54030078, 0.52432076, 0.25927142, 0.26609512],
        [-0.30441513, 0.24286921, -0.25189404, 0.20602511, -0.15945187, 0.34067233],
        [-0.49561272, 0.66841298, 0.22612858, -0.27648291, -0.68537078, 0.49281249],
        [-0.74190021, 0.76733378, 0.45429677, -0.39983911, -0.86150881, 0.69709591],
        [-0.9993634, 0.7839357, 0.61935272, -0.44056929, -0.96648527, 0.90512654],
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (non-negativity)
# Using grid search
# No out-of-range prediction
# Scatter data
sol32 = np.array(
    [
        [-0.31403892, 0.23097712, 0.46651563, -0.00490763, 0.13142822, -0.07749757],
        [-0.20328674, 0.34385503, 0.49046866, -0.05809402, 0.07546361, -0.0811262],
        [-0.10127537, 0.36402234, 0.42963434, -0.08257446, 0.04780884, -0.07908897],
        [-0.03918895, 0.10604644, 0.10270272, 0.09714239, 0.19248499, -0.06170164],
        [-0.05064578, 0.01144833, -0.08923257, 0.32950791, 0.31721502, -0.0391341],
        [-0.19459134, 0.28653611, 0.00636516, 0.12258608, 0.06416393, -0.03240328],
        [-0.43563876, 0.67218153, 0.20379547, -0.03523921, -0.01238228, -0.02169573],
        [-0.74115103, 0.8003905, 0.21315646, -0.08538237, 0.13537096, -0.03081965],
        [-1.05825658, 0.85567317, 0.17041346, -0.16277384, 0.2700411, -0.04256863],
    ]
)

# np.sin(3 * pi * x) * np.sin(2 * pi * y) (non-decreasing on second covariate)
# Using grid search
# Forecasting second covariate
# Scatter data
sol33 = np.array(
    [
        [
            0.14486093,
            -0.05904518,
            -0.06992968,
            0.21620561,
            0.22518483,
            -0.01533738,
            0.28988021,
        ],
        [
            0.06966106,
            0.09066459,
            0.09358899,
            0.04617677,
            0.04375403,
            0.06398283,
            0.29258121,
        ],
        [
            -0.02788336,
            0.09200862,
            0.09119552,
            -0.00529088,
            -0.00457915,
            0.15502788,
            0.29528222,
        ],
        [
            -0.18012447,
            -0.20693637,
            -0.20660839,
            0.22674943,
            0.22632527,
            0.25494822,
            0.29798322,
        ],
        [
            -0.25520822,
            -0.2678526,
            -0.2683514,
            0.24782299,
            0.24880791,
            0.23633132,
            0.30068424,
        ],
        [
            -0.10378429,
            -0.02639488,
            -0.02472765,
            -0.00768298,
            -0.01119853,
            0.01008489,
            0.30338526,
        ],
        [
            0.08268948,
            0.32599124,
            0.31982114,
            -0.26453193,
            -0.25145468,
            -0.23466739,
            0.30608628,
        ],
        [
            0.26214394,
            0.65638192,
            0.65320937,
            -0.50275616,
            -0.47142458,
            -0.47614594,
            0.3087873,
        ],
    ]
)


@pytest.mark.parametrize(
    "deg, ord_d, n_int, x_range, sp_method, sp_args, family, int_constraints, pt_constraints, pdf_constraint, data, y_range, sol",
    [
        (
            (3,),
            (2,),
            (11,),
            None,
            "grid_search",
            {"grid": ((0.1,),), "verbose": False, "parallel": False},
            "gaussian",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 2 * np.pi, 101),
                    "y": np.cos(np.linspace(0, 2 * np.pi, 101)),
                }
            ),
            None,
            sol1,
        ),
        (
            (3,),
            (2,),
            (11,),
            None,
            "grid_search",
            {"grid": ((0.1,),), "verbose": False, "parallel": False},
            "gaussian",
            {0: {0: {"+": 0.0}}},
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 2 * np.pi, 101),
                    "y": np.cos(np.linspace(0, 2 * np.pi, 101)),
                }
            ),
            None,
            sol2,
        ),
        (
            (5,),
            (3,),
            (15,),
            None,
            "grid_search",
            {"grid": ((0.73,),), "verbose": False, "parallel": False},
            "gaussian",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 200, 201),
                    "y": np.exp(4 - np.linspace(0, 200, 201) / 25)
                    + 4 * np.cos(np.linspace(0, 200, 201) / 8),
                }
            ),
            None,
            sol3,
        ),
        (
            (5,),
            (3,),
            (15,),
            None,
            "grid_search",
            {"grid": ((0.73,),), "verbose": False, "parallel": False},
            "gaussian",
            {0: {0: {"+": 10.0, "-": 40.0}}},
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 200, 201),
                    "y": np.exp(4 - np.linspace(0, 200, 201) / 25)
                    + 4 * np.cos(np.linspace(0, 200, 201) / 8),
                }
            ),
            None,
            sol4,
        ),
        (
            (2,),
            (1,),
            (10,),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16),),
            },
            "gaussian",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 1, 50),
                    "y": 2 * (2 * np.linspace(0, 1, 50) - 1) ** 3,
                }
            ),
            None,
            sol5,
        ),
        (
            (2,),
            (1,),
            (10,),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16),),
            },
            "gaussian",
            {0: {1: {"+": 0.0}, 2: {"-": 0.0}}},
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 1, 50),
                    "y": 2 * (2 * np.linspace(0, 1, 50) - 1) ** 3,
                }
            ),
            None,
            sol6,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "grid_search",
            {
                "grid": ((0.89, 5.96), (3.45, 0.012)),
                "verbose": False,
                "parallel": False,
            },
            "gaussian",
            None,
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ),
            None,
            sol7,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "grid_search",
            {
                "grid": ((0.89, 5.96), (3.45, 0.012)),
                "verbose": False,
                "parallel": False,
            },
            "gaussian",
            {0: {0: {"+": 0}}, 1: {0: {"+": 0}}},
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ),
            None,
            sol8,
        ),
        (
            (2, 2),
            (1, 1),
            (10, 4),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(2),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16), (1e-10, 1e16)),
            },
            "gaussian",
            None,
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ),
            None,
            sol9,
        ),
        (
            (2, 2),
            (1, 1),
            (10, 4),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(2),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16), (1e-10, 1e16)),
            },
            "gaussian",
            {0: {0: {"+": 0}}, 1: {0: {"+": 0}, 1: {"+": 0}}},
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ),
            None,
            sol10,
        ),
        (
            (3, 4, 2),
            (2, 2, 1),
            (4, 6, 3),
            None,
            "grid_search",
            {"verbose": False, "parallel": False, "grid": ((0.1,), (0.2,), (0.3,))},
            "gaussian",
            None,
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 40), np.linspace(0, 1, 50)),
                y=np.einsum(
                    "i,j,k->ijk",
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 40)),
                    np.sin(np.pi * np.linspace(0, 1, 50)),
                ),
            ),
            None,
            sol11,
        ),
        (
            (3, 4, 2),
            (2, 2, 1),
            (4, 6, 3),
            None,
            "grid_search",
            {"verbose": False, "parallel": False, "grid": ((0.1,), (0.2,), (0.3,))},
            "gaussian",
            {0: {0: {"+": 0}}, 1: {0: {"+": 0}}, 2: {0: {"+": 0}}},
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 40), np.linspace(0, 1, 50)),
                y=np.einsum(
                    "i,j,k->ijk",
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 40)),
                    np.sin(np.pi * np.linspace(0, 1, 50)),
                ),
            ),
            None,
            sol12,
        ),
        (
            (5,),
            (1,),
            (8,),
            {0: (-2, 5)},
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "L-BFGS-B",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16),),
            },
            "gaussian",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, np.pi, 51),
                    "y": np.sin(np.linspace(0, np.pi, 51)),
                }
            ),
            None,
            sol13,
        ),
        (
            (5,),
            (1,),
            (8,),
            {0: (2.5,)},
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "L-BFGS-B",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-4, 1e6),),
            },
            "gaussian",
            {0: {0: {"+": 0}}},
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, np.pi / 2, 51),
                    "y": np.sin(np.linspace(0, np.pi / 2, 51)),
                }
            ),
            None,
            sol14,
        ),
        (
            (2, 2),
            (1, 1),
            (4, 3),
            {0: (1.1,), 1: (-0.1,)},
            "grid_search",
            {"verbose": False, "parallel": False, "grid": ((2,), (2,))},
            "gaussian",
            {1: {1: {"+": 0}}},
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, np.pi / 3, 51), np.linspace(0, np.pi / 4, 41)),
                y=np.outer(
                    np.arctan(np.linspace(0, np.pi / 3, 51)),
                    np.arctan(np.linspace(0, np.pi / 4, 41)),
                ),
            ),
            None,
            sol15,
        ),
        (
            (3,),
            (2,),
            (10,),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16),),
            },
            "gaussian",
            None,
            {(2,): {"equalsTo": pd.DataFrame({"x": [0.8], "y": [700], "tol": [1e-8]})}},
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 1, 50),
                    "y": 2 * (2 * np.linspace(0, 1, 50) - 1) ** 3,
                }
            ),
            None,
            sol16,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "grid_search",
            {
                "grid": ((0.89, 5.96), (3.45, 0.012)),
                "verbose": False,
                "parallel": False,
            },
            "gaussian",
            None,
            {
                (0, 0): {
                    "equalsTo": pd.DataFrame(
                        {"x1": [4], "x2": [3], "y": [4], "tol": [1e-8]}
                    )
                }
            },
            False,
            grid_to_scatter(
                x=(np.linspace(0, 3 * np.pi, 30), np.linspace(0, 2 * np.pi, 20)),
                y=np.outer(
                    np.sin(np.linspace(0, 3 * np.pi, 30)),
                    np.sin(np.linspace(0, 2 * np.pi, 20)),
                ),
            ),
            None,
            sol17,
        ),
        (
            (3,),
            (2,),
            (11,),
            None,
            "grid_search",
            {"grid": ((0.1,),), "verbose": False, "parallel": False},
            "gaussian",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 2 * np.pi, 101)[::-1],
                    "y": np.cos(np.linspace(0, 2 * np.pi, 101))[::-1],
                }
            ),
            None,
            sol1,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "grid_search",
            {
                "grid": ((0.89, 5.96), (3.45, 0.012)),
                "verbose": False,
                "parallel": False,
            },
            "gaussian",
            None,
            None,
            False,
            grid_to_scatter(
                x=(
                    np.linspace(0, 1, 30)[::-1],
                    np.linspace(0, 1, 20)[::-1],
                ),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)[::-1]),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)[::-1]),
                ),
            ),
            None,
            sol7,
        ),
        (
            (3,),
            (2,),
            (5,),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16),),
            },
            "gaussian",
            None,  # Do not include non-negative constraint explicitly
            None,
            True,
            pd.DataFrame(
                {
                    "x": np.linspace(-10, 10, 51),
                    "y": norm.pdf(np.linspace(-10, 10, 51), 0, 2),
                }
            ),
            None,
            sol18,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "grid_search",
            {
                "grid": ((0.1,), (0.01,)),
                "verbose": False,
                "parallel": False,
            },
            "gaussian",
            {0: {0: {"+": 0}}, 1: {0: {"+": 0}}},
            None,
            True,
            grid_to_scatter(
                x=(np.linspace(-3, 3, 50), np.linspace(-4, 4, 60)),
                y=multivariate_normal.pdf(
                    x=list(
                        itertools.product(
                            np.linspace(-3, 3, 50), np.linspace(-4, 4, 60)
                        )
                    ),
                    mean=[0, 0],
                    cov=[[2, 0.5], [0.5, 1]],
                ).reshape((len(np.linspace(-3, 3, 50)), len(np.linspace(-4, 4, 60)))),
            ),
            None,
            sol19,
        ),
        (
            (5,),
            (3,),
            (15,),
            None,
            "grid_search",
            {"grid": ((0.73,),), "verbose": False, "parallel": False},
            "gaussian",
            {0: {0: {"+": 10.0, "-": 40.0}}},
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 200, 201),
                    "y": np.exp(4 - np.linspace(0, 200, 201) / 25)
                    + 4 * np.cos(np.linspace(0, 200, 201) / 8),
                }
            ),
            (0, 1),
            sol20,
        ),
        (
            (3,),
            (2,),
            (10,),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16),),
            },
            "gaussian",
            None,
            {(2,): {"equalsTo": pd.DataFrame({"x": [0.8], "y": [700], "tol": [1e-8]})}},
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 1, 50),
                    "y": (2 * np.linspace(0, 1, 50) - 1) ** 3,
                }
            ),
            (-0.6, 0.4),
            sol21,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "grid_search",
            {
                "grid": ((0.89, 5.96), (3.45, 0.012)),
                "verbose": False,
                "parallel": False,
            },
            "gaussian",
            {0: {0: {"+": 0}}, 1: {0: {"+": 0}}},
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ),
            (0, 0.01),
            sol22,
        ),
        (
            (3,),
            (2,),
            (10,),
            None,
            "grid_search",
            {
                "grid": ((1,),),
                "verbose": False,
                "parallel": False,
            },
            "poisson",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 10, 401),
                    "y": (np.abs(np.sin(np.linspace(0, 10, 401))) * 100).astype(int),
                }
            ),
            None,
            sol23,
        ),
        (
            (4,),
            (1,),
            (10,),
            {0: (-0.7, 10.3)},
            "grid_search",
            {
                "grid": ((1.234,),),
                "verbose": False,
                "parallel": False,
            },
            "poisson",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 10, 401),
                    "y": (np.abs(np.sin(np.linspace(0, 10, 401))) * 100).astype(int),
                }
            ),
            None,
            sol24,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(2),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16), (1e-10, 1e16)),
            },
            "poisson",
            None,
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 10, 41), np.linspace(0, 8, 21)),
                y=(
                    np.abs(
                        np.outer(
                            np.sin(np.linspace(0, 10, 41)),
                            np.sin(np.linspace(0, 8, 21)),
                        )
                    )
                    * 100
                ).astype(int),
            ),
            None,
            sol25,
        ),
        (
            (5,),
            (3,),
            (8,),
            None,
            "grid_search",
            {
                "grid": ((1.234e-5,),),
                "verbose": False,
                "parallel": False,
            },
            "poisson",
            {0: {1: {"+": 0}}},
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(-3, 3, 401),
                    "y": (expit(np.linspace(-3, 3, 401)) * 100).astype(int),
                }
            ),
            None,
            sol26,
        ),
        (
            (3,),
            (2,),
            (15,),
            None,
            "grid_search",
            {
                "grid": ((1.23,),),
                "verbose": False,
                "parallel": False,
            },
            "binomial",
            None,
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 80, 80),
                    "y": np.concatenate(
                        (np.zeros(20), np.tile([0, 1], 20), np.ones(20))
                    ),
                }
            ),
            None,
            sol27,
        ),
        (
            (3,),
            (2,),
            (15,),
            None,
            "optimizer",
            {
                "verbose": False,
                "x0": np.ones(1),
                "method": "SLSQP",
                "options": {"ftol": 1e-12, "maxiter": 100},
                "bounds": ((1e-10, 1e16),),
            },
            "binomial",
            {0: {1: {"+": 0.0}}},
            None,
            False,
            pd.DataFrame(
                {
                    "x": np.linspace(0, 80, 80),
                    "y": np.concatenate(
                        (np.zeros(20), np.tile([0, 1], 20), np.ones(20))
                    ),
                }
            ),
            None,
            sol28,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            None,
            "grid_search",
            {
                "grid": ((0.0123,), (0.00456,)),
                "verbose": False,
                "parallel": False,
            },
            "binomial",
            None,
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.abs(
                    np.round(
                        np.outer(
                            np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                            np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                        )
                    )
                ),
            ),
            None,
            sol29,
        ),
        (
            (3,),
            (2,),
            (10,),
            None,
            "grid_search",
            {
                "grid": ((0.1,),),
                "verbose": False,
                "parallel": False,
            },
            "gaussian",
            {0: {1: {"+": 0}, 2: {"-": 0}}},
            {
                (0,): {
                    "greaterThan": pd.DataFrame(
                        {
                            "x": np.linspace(1, 10, 100),
                            "y": 3 + np.log(np.linspace(1, 10, 100)),
                        }
                    )
                }
            },
            False,
            pd.DataFrame(
                {"x": np.linspace(1, 10, 100), "y": 3 + np.log(np.linspace(1, 10, 100))}
            ),
            None,
            sol30,
        ),
        (
            (3, 2),
            (2, 1),
            (6, 4),
            None,
            "grid_search",
            {"grid": ((1.234,),)},
            "gaussian",
            None,
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ).sample(156, random_state=1),
            None,
            sol31,
        ),
        (
            (3, 2),
            (2, 1),
            (6, 4),
            None,
            "grid_search",
            {"grid": ((1.234,),)},
            "gaussian",
            {0: {0: {"+": 0}}, 1: {0: {"+": 0}}},
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ).sample(156, random_state=1),
            None,
            sol32,
        ),
        (
            (3, 2),
            (2, 1),
            (5, 4),
            {1: (1.2,)},
            "grid_search",
            {"grid": ((1.234,),)},
            "gaussian",
            {1: {1: {"+": 0}}},
            None,
            False,
            grid_to_scatter(
                x=(np.linspace(0, 1, 30), np.linspace(0, 1, 20)),
                y=np.outer(
                    np.sin(3 * np.pi * np.linspace(0, 1, 30)),
                    np.sin(2 * np.pi * np.linspace(0, 1, 20)),
                ),
            ).sample(156, random_state=1),
            None,
            sol33,
        ),
    ],
)


# Test the decision variable with the expansion coefficients of the B-spline
# basis
def test_sol(
    deg,
    ord_d,
    n_int,
    data,
    x_range,
    sp_method,
    sp_args,
    family,
    int_constraints,
    pt_constraints,
    pdf_constraint,
    y_range,
    sol,
):
    out = CPsplines(
        deg=deg,
        ord_d=ord_d,
        n_int=n_int,
        sp_method=sp_method,
        sp_args=sp_args,
        x_range=x_range,
        family=family,
        int_constraints=int_constraints,
        pt_constraints=pt_constraints,
        pdf_constraint=pdf_constraint,
    )
    out.fit(data=data, y_col="y", y_range=y_range)
    np.testing.assert_allclose(out.sol, sol, rtol=0.01, atol=1e-2)
